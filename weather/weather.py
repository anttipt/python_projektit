## Asennetaan requests-kirjasto http-pyynt√∂jen tekemiseen ja verkkopalvelimien vastausten k√§sittelyyn
import requests # Tuodaan k√§ytt√∂√∂n requests-kirjasto, jolla voidaan tehd√§ HTTP-pyynt√∂j√§

# M√§√§ritell√§√§n funktio, joka hakee s√§√§tiedot annetulle kaupungille ja API-avaimella
def hae_saa(kaupunki, api_avain):
    # Rakennetaan URL OpenWeatherMapin rajapintaan, mukaan lukien kaupunki, API-avain, yksik√∂t ja kieli
    url = f"http://api.openweathermap.org/data/2.5/weather?q={kaupunki}&appid={api_avain}&units=metric&lang=fi"
    # L√§hetet√§√§n GET-pyynt√∂ URL-osoitteeseen
    vastaus = requests.get(url)

    # Tarkistetaan, onnistuiko pyynt√∂ (statuskoodi 200 tarkoittaa OK)
    if vastaus.status_code == 200:
        data = vastaus.json() # Muutetaan vastaus JSON-muotoon (Pythonin sanakirjaksi)
        # Poimitaan tarvittavat tiedot JSON-rakenteesta
        nimi = data['name'] # kaupungin nimi
        lampotila = data['main']['temp'] # l√§mp√∂tila celcius-asteina
        kuvaus = data['weather'][0]['description'] # s√§√§kuvaus (esim. selke√§√§)
        tuuli = data['wind']['speed'] # tuulen nopeus m/s
        # Tulostetaan s√§√§tiedot k√§ytt√§j√§lle
        print(f"\nüå§Ô∏è S√§√§ kohteessa {nimi}:")
        print(f"  L√§mp√∂tila: {lampotila}¬∞C")
        print(f"  Kuvaus: {kuvaus}")
        print(f"  Tuulen nopeus: {tuuli} m/s\n")
    else:
        # Jos pyynt√∂ ep√§onnistui, ilmoitetaan virheest√§
        print("‚ùå Kaupunkia ei l√∂ytynyt tai API-avain on virheellinen.")
# P√§√§funktio, joka pyyt√§√§ k√§ytt√§j√§lt√§ tarvittavat tiedot ja kutsuu s√§√§funktion
def main():
    print("=== S√§√§sovellus ===")
    api_avain = input("Sy√∂t√§ OpenWeatherMap API-avain: ") # K√§ytt√§j√§ sy√∂tt√§√§ API-avaimen
    kaupunki = input("Sy√∂t√§ kaupunki: ") # k√§ytt√§j√§ sy√∂tt√§√§ kaupungin nimen
    hae_saa(kaupunki, api_avain) # Kutsutaan s√§√§funktiota annetuilla tiedoilla

# Tarkistetaan, onko tiedosto suoraan ajossa (eik√§ esim. tuotu moduulina)
if __name__ == "__main__":
    main() # Suoritetaan p√§√§funktio
